cmake_minimum_required(VERSION 3.3)

# Recommend native Win32/Mac building as they're not well supported yet
if (APPLE)
  message(FATAL_ERROR "Please use Xcode for Mac OS X builds")
elseif (WIN32)
  message(FATAL_ERROR "Please use Visual Studio for Windows builds")
endif ()

file(GLOB BASE_SRC Base/*.cpp Base/*.c)
file(GLOB SDL_SRC SDL/*.cpp)
#file(GLOB WIN_SRC Win32/*.cpp Win32/*.rc Win32/Shaders/*Shader.hlsl)
endif()

add_executable(simcoupe WIN32 MACOSX_BUNDLE ${BASE_SRC} ${SDL_SRC} ${WIN_SRC})
target_include_directories(simcoupe PRIVATE Base SDL)

include(FindPkgConfig)
include(CheckCXXCompilerFlag)

CHECK_CXX_COMPILER_FLAG("-stdlib=libc++" COMPILER_SUPPORTS_STDLIBCXX)
if (COMPILER_SUPPORTS_STDLIBCXX AND NOT APPLE)
  target_compile_options(simcoupe PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-stdlib=libstdc++>)
endif ()

pkg_search_module(SDL2 sdl2)
if (SDL2_FOUND)
  message(STATUS "Using SDL2")
  target_compile_definitions(simcoupe PRIVATE USE_SDL2=1)
  target_include_directories(simcoupe PRIVATE ${SDL2_INCLUDE_DIRS})
  link_directories(${SDL2_LIBRARY_DIRS})
  target_link_libraries(simcoupe ${SDL2_LIBRARIES})
else ()
  pkg_search_module(SDL sdl)
  if (SDL_FOUND)
    target_include_directories(simcoupe PRIVATE ${SDL_INCLUDE_DIRS})
    link_directories(${SDL_LIBRARY_DIRS})
    target_link_libraries(simcoupe ${SDL_LIBRARIES})
  else ()
    message(SEND_ERROR "This program requires SDL 1.2 or SDL 2.0 [recommended]")
  endif ()
endif ()

find_library(SPECTRUM_LIBRARY NAMES spectrum ENV LD_LIBRARY_PATH)
find_path(SPECTRUM_INCLUDE_DIR libspectrum.h)
if (SPECTRUM_LIBRARY AND SPECTRUM_INCLUDE_DIR)
  message(STATUS "Using libspectrum")
  target_compile_definitions(simcoupe PRIVATE USE_LIBSPECTRUM=1)
  target_include_directories(simcoupe PRIVATE ${SPECTRUM_INCLUDE_DIR})
  target_link_libraries(simcoupe ${SPECTRUM_LIBRARY})
endif ()

set(CMAKE_THREAD_PREFER_PTHREAD pthread)
find_package(Threads REQUIRED)
target_link_libraries(simcoupe ${CMAKE_THREAD_LIBS_INIT})

find_package(ZLIB)
if (ZLIB_FOUND)
  message(STATUS "Using zlib")
  target_compile_definitions(simcoupe PRIVATE USE_ZLIB=1)
  target_include_directories(simcoupe PRIVATE ${ZLIB_INCLUDE_DIR})
  target_link_libraries(simcoupe ${ZLIB_LIBRARY})
endif ()

find_package(BZip2)
if (BZIP2_FOUND)
  message(STATUS "Using bzip2")
  target_compile_definitions(simcoupe PRIVATE USE_BZIP2=1)
  target_include_directories(simcoupe PRIVATE ${BZIP2_INCLUDE_DIR})
  target_link_libraries(simcoupe ${BZIP2_LIBRARIES})
endif ()

find_library(RESID_LIBRARY NAMES resid ENV LD_LIBRARY_PATH)
find_path(RESID_INCLUDE_DIR resid/sid.h)
if (RESID_LIBRARY AND RESID_INCLUDE_DIR)
  message(STATUS "Using resid")
  target_compile_definitions(simcoupe PRIVATE USE_RESID=1)
  target_include_directories(simcoupe PRIVATE ${RESID_INCLUDE_DIR})
  target_link_libraries(simcoupe ${RESID_LIBRARY})
else ()
  message(STATUS "Could NOT find reSID library for SID support")
endif ()


set_property(TARGET simcoupe PROPERTY CMAKE_BUILD_TYPE Release)

if (CMAKE_BUILD_TYPE MATCHES Debug)
  target_compile_definitions(simcoupe PRIVATE _DEBUG=1)
endif ()

if (CMAKE_BUILD_TOOL MATCHES "make")
  target_compile_options(simcoupe PRIVATE -Wall -pedantic)
elseif (CMAKE_BUILD_TOOL MATCHES "(msdev|devenv|nmake)")
  target_compile_options(simcoupe PRIVATE /W4)
endif ()

set_property(TARGET simcoupe PROPERTY CXX_STANDARD 11)
set_property(TARGET simcoupe PROPERTY INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}")

set(RESOURCE_DIR ${CMAKE_INSTALL_PREFIX}/share/simcoupe)
target_compile_definitions(simcoupe PRIVATE RESOURCE_DIR="${RESOURCE_DIR}/")

install(TARGETS simcoupe DESTINATION bin)
install(DIRECTORY Resource/ DESTINATION ${RESOURCE_DIR})
